/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => NukeOrphansPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  attachmentsPaths: [],
  trashFolderOverride: "",
  ignorePatterns: []
};
var CSS_CLASS_CHECK_PASS = "nuke-orphans-pass";
var CSS_CLASS_CHECK_FAIL = "nuke-orphans-fail";
var NukeOrphansSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", {
      attr: {
        "style": "text-align: center;"
      },
      text: "Nuke Orphans Plugin Settings"
    });
    new import_obsidian.Setting(containerEl).setName("Override Attachment Folder").setDesc("Where attachments are stored").addTextArea((text) => text.setPlaceholder(this.app.vault.config.attachmentFolderPath).setValue(this.plugin.settings.attachmentsPaths.join("\n")).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.attachmentsPaths = value.split("\n").map((x) => x.trim()).filter((x) => x.length > 0);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Override Trash Folder").setDesc("Trash folder path, will be created if it does not exist").addText((text) => text.setPlaceholder(this.plugin.shouldUseSystemTrash() ? "system trash" : ".trash/").setValue(this.plugin.settings.trashFolderOverride).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.trashFolderOverride = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Ignore Patterns").setDesc("Add regex patterns to ignore when searching for orphans").addTextArea((text) => text.setValue(this.plugin.settings.ignorePatterns.join("\n")).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.ignorePatterns = value.split("\n").map((x) => x.trim()).filter((x) => x.length > 0);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Test Settings").setDesc("If the path is ignored it will be red, otherwise green").addText((text) => {
      function resetColor() {
        text.inputEl.classList.remove(CSS_CLASS_CHECK_PASS, CSS_CLASS_CHECK_FAIL);
      }
      text.onChange((value) => {
        resetColor();
        if (value.length == 0)
          return;
        if (this.plugin.getIgnoreFilter().test(value))
          text.inputEl.classList.add(CSS_CLASS_CHECK_FAIL);
        else
          text.inputEl.classList.add(CSS_CLASS_CHECK_PASS);
      });
      text.inputEl.addEventListener("focusout", () => resetColor());
      text.inputEl.addEventListener("focusin", () => text.onChanged());
    });
  }
};

// src/trash_modal.ts
var import_obsidian2 = __toModule(require("obsidian"));
var path = __toModule(require("path"));
var TrashFilesModal = class extends import_obsidian2.Modal {
  constructor(app, files, trashFolderPath, useSystemTrash) {
    super(app);
    this.files = files;
    this.trashFolderPath = trashFolderPath;
    this.useSystemTrash = useSystemTrash;
  }
  onOpen() {
    let { contentEl, titleEl } = this;
    titleEl.setText("Move " + this.files.length + " files to trash?");
    const div = contentEl.createDiv({
      cls: "trash-modal-file-links"
    });
    this.files.forEach((file) => {
      div.createEl("p", {
        cls: "trash-modal-link",
        text: file.path
      }).addEventListener("click", (e) => __async(this, null, function* () {
        this.close();
        yield this.app.workspace.activeLeaf.openFile(file);
      }));
    });
    contentEl.createEl("button", {
      text: "Cancel"
    }).addEventListener("click", () => this.close());
    contentEl.createEl("button", {
      text: "Copy to clipboard"
    }).addEventListener("click", () => __async(this, null, function* () {
      yield navigator.clipboard.writeText(this.files.map((file) => file.path).join("\n"));
      new import_obsidian2.Notice("Copied list to clipboard");
    }));
    contentEl.createEl("button", {
      cls: ["mod-cta", "trash-modal-button"],
      text: "Trash"
    }).addEventListener("click", () => __async(this, null, function* () {
      if (this.trashFolderPath.length > 0) {
        if (!(yield this.app.vault.adapter.exists(this.trashFolderPath)))
          yield this.app.vault.createFolder(this.trashFolderPath);
        this.files.forEach((file) => __async(this, null, function* () {
          return yield this.app.fileManager.renameFile(file, path.join(this.trashFolderPath, file.name));
        }));
      } else
        this.files.forEach((file) => __async(this, null, function* () {
          return yield this.app.vault.trash(file, this.useSystemTrash);
        }));
      new import_obsidian2.Notice("Trashed " + this.files.length + " files");
      this.close();
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var RegexFilter = class {
  constructor(ignoredPaths) {
    this.regexes = new Set(ignoredPaths.map((x) => RegExp(x)));
  }
  test(input) {
    return Array.from(this.regexes).some((x) => x.test(input));
  }
};
var NukeOrphansPlugin = class extends import_obsidian3.Plugin {
  getIgnoreFilter() {
    let patterns = [...this.settings.ignorePatterns];
    if (this.settings.trashFolderOverride.length > 0)
      patterns.push("^" + this.settings.trashFolderOverride);
    return new RegexFilter(patterns);
  }
  shouldUseSystemTrash() {
    switch (this.app.vault.config.trashOption) {
      case "system":
        return true;
      default:
        return false;
    }
  }
  getAttachmentsPaths() {
    if (this.settings.attachmentsPaths.length === 0)
      return [this.app.vault.config.attachmentFolderPath];
    return this.settings.attachmentsPaths;
  }
  isAttachment(file) {
    return this.getAttachmentsPaths().some((element) => {
      console.log(file.path, file.parent.name, element, element.substring(2));
      if (element.startsWith("./") && file.parent.name == element.substring(2))
        return true;
      if (file.parent.path == element)
        return true;
    });
  }
  getOrphans() {
    const links = new Set(Object.values(this.app.metadataCache.resolvedLinks).flatMap((x) => Object.keys(x)));
    const filter = this.getIgnoreFilter();
    return this.app.vault.getFiles().filter((file) => !links.has(file.path) && !filter.test(file.path));
  }
  trash(files) {
    if (files.length > 0)
      new TrashFilesModal(this.app, files, this.settings.trashFolderOverride, this.shouldUseSystemTrash()).open();
    else
      new import_obsidian3.Notice("No orphaned files have been found");
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "nuke-orphaned-attachments",
        name: "Trash orphaned attachments",
        callback: () => this.trash(this.getOrphans().filter((file) => this.isAttachment(file)))
      });
      this.addCommand({
        id: "nuke-orphaned-notes",
        name: "Trash orphaned notes",
        callback: () => this.trash(this.getOrphans().filter((file) => file.extension === "md"))
      });
      this.addCommand({
        id: "nuke-orphaned",
        name: "Trash orphaned files",
        callback: () => this.trash(this.getOrphans())
      });
      this.addSettingTab(new NukeOrphansSettingsTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
